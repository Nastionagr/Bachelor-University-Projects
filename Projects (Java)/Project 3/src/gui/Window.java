package gui;

import java.awt.CardLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.time.temporal.Temporal;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.logging.ConsoleHandler;
import java.util.logging.Level;
import java.util.logging.LogManager;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SpinnerDateModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import program_code.Category;
import program_code.Hotel;
import program_code.Offer;
import program_code.Person;
import program_code.Reservation;
import program_code.Room;

public class Window extends javax.swing.JFrame {
    
    Information INFO = new Information();
    
    private File choosedPhoto = null;
    private ArrayList<Person> people = new ArrayList<Person>();
    private ArrayList<Hotel> hotels = new ArrayList<Hotel>();
    private ArrayList<File> photos = new ArrayList<File>();
    private ArrayList<Category> categories = new ArrayList<Category>();
    private ArrayList<Offer> offers = new ArrayList<Offer>();
    private ArrayList<Room> rooms = new ArrayList<Room>();
    private ArrayList<Reservation> reservations = new ArrayList<Reservation>();
    
    private final static Logger LOGGER = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);

    /**
     * Creates new form Window
     */
    public Window() {
        initComponents();
        initDate();
    }
    
    private void initDate(){
        Calendar currentDate = Calendar.getInstance();
        currentDate.set(Calendar.HOUR_OF_DAY, 0);
        currentDate.set(Calendar.MINUTE, 0);
        currentDate.set(Calendar.SECOND, 0);
        currentDate.set(Calendar.MILLISECOND, 0);
        Sdate.setValue(currentDate.getTime());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        BGgender = new javax.swing.ButtonGroup();
        BGpayment = new javax.swing.ButtonGroup();
        Pmenu = new javax.swing.JPanel();
        BcreateU = new javax.swing.JButton();
        BmakeR = new javax.swing.JButton();
        BuseO = new javax.swing.JButton();
        BcancelR = new javax.swing.JButton();
        BpayR = new javax.swing.JButton();
        BseeUH = new javax.swing.JButton();
        BaddH = new javax.swing.JButton();
        BseeR = new javax.swing.JButton();
        BseeRH = new javax.swing.JButton();
        Slanguage = new javax.swing.JSlider();
        Lsk = new javax.swing.JLabel();
        Leng = new javax.swing.JLabel();
        Sdate = new javax.swing.JSpinner();
        Bexit = new javax.swing.JButton();
        Bopen = new javax.swing.JButton();
        Bsave = new javax.swing.JButton();
        Pcontent = new javax.swing.JPanel();
        PcreateU = new javax.swing.JPanel();
        Bmr = new javax.swing.JRadioButton();
        Bmrs = new javax.swing.JRadioButton();
        Lname = new javax.swing.JLabel();
        Tname = new javax.swing.JTextField();
        Lemail = new javax.swing.JLabel();
        Temail = new javax.swing.JTextField();
        Lcountry = new javax.swing.JLabel();
        Tcountry = new javax.swing.JTextField();
        Laddress = new javax.swing.JLabel();
        Taddress = new javax.swing.JTextField();
        Bcreate = new javax.swing.JButton();
        PmakeR = new javax.swing.JPanel();
        PforUser = new javax.swing.JPanel();
        LselectU = new javax.swing.JLabel();
        CBpeople = new javax.swing.JComboBox<>();
        PforWishes = new javax.swing.JPanel();
        Lsetdate = new javax.swing.JLabel();
        Lfrom = new javax.swing.JLabel();
        Sfrom = new javax.swing.JSpinner();
        Ltill = new javax.swing.JLabel();
        Still = new javax.swing.JSpinner();
        Bsearch = new javax.swing.JButton();
        PforReserve = new javax.swing.JPanel();
        LchooseRoom = new javax.swing.JLabel();
        SPavailableRooms = new javax.swing.JScrollPane();
        LavailableRooms = new javax.swing.JList<>();
        Ltotal = new javax.swing.JLabel();
        LtotalSum = new javax.swing.JLabel();
        Breserve = new javax.swing.JButton();
        PuseO = new javax.swing.JPanel();
        LchooseReser = new javax.swing.JLabel();
        SPreser = new javax.swing.JScrollPane();
        Lreser = new javax.swing.JList<>();
        LchooseO = new javax.swing.JLabel();
        Loffer = new javax.swing.JLabel();
        CBoffers = new javax.swing.JComboBox<>();
        Badd = new javax.swing.JButton();
        SPreserO = new javax.swing.JScrollPane();
        LreserO = new javax.swing.JList<>();
        LaddSum = new javax.swing.JLabel();
        Lsum = new javax.swing.JLabel();
        Bremember = new javax.swing.JButton();
        PcancelR = new javax.swing.JPanel();
        Lcancel = new javax.swing.JLabel();
        SPreservations = new javax.swing.JScrollPane();
        Lreservations = new javax.swing.JList<>();
        Bcancel = new javax.swing.JButton();
        PpayR = new javax.swing.JPanel();
        LchooseR = new javax.swing.JLabel();
        SPnotpayedR = new javax.swing.JScrollPane();
        LnotpayedR = new javax.swing.JList<>();
        Lchoosemethod = new javax.swing.JLabel();
        RBcard = new javax.swing.JRadioButton();
        RBcash = new javax.swing.JRadioButton();
        Bpay = new javax.swing.JButton();
        PseeR = new javax.swing.JPanel();
        SPseeNP = new javax.swing.JScrollPane();
        LseeNP = new javax.swing.JList<>();
        PseeUH = new javax.swing.JPanel();
        LchooseU = new javax.swing.JLabel();
        CBchooseU = new javax.swing.JComboBox<>();
        SPhistoryU = new javax.swing.JScrollPane();
        LhistoryU = new javax.swing.JList<>();
        PaddH = new javax.swing.JPanel();
        PforHotel = new javax.swing.JPanel();
        Lphotos = new javax.swing.JLabel();
        Bchoose = new javax.swing.JButton();
        BaddPhoto = new javax.swing.JButton();
        LnameH = new javax.swing.JLabel();
        TnameH = new javax.swing.JTextField();
        LcountryH = new javax.swing.JLabel();
        TcountryH = new javax.swing.JTextField();
        LaddressH = new javax.swing.JLabel();
        TaddressH = new javax.swing.JTextField();
        LownerH = new javax.swing.JLabel();
        TownerH = new javax.swing.JTextField();
        LemailH = new javax.swing.JLabel();
        TemailH = new javax.swing.JTextField();
        pforOffer = new javax.swing.JPanel();
        LnameO = new javax.swing.JLabel();
        TnameO = new javax.swing.JTextField();
        LdescO = new javax.swing.JLabel();
        TdescO = new javax.swing.JTextField();
        LpriceO = new javax.swing.JLabel();
        SpriceO = new javax.swing.JSpinner();
        CBcurO = new javax.swing.JComboBox<>();
        BaddO = new javax.swing.JButton();
        SPoffers = new javax.swing.JScrollPane();
        Loffers = new javax.swing.JList<>();
        PforRoom = new javax.swing.JPanel();
        LnumberR = new javax.swing.JLabel();
        TnumberR = new javax.swing.JTextField();
        Sdiscount = new javax.swing.JSpinner();
        Ldiscount = new javax.swing.JLabel();
        Scondition = new javax.swing.JSpinner();
        Lcondition = new javax.swing.JLabel();
        Lcategory = new javax.swing.JLabel();
        CBcategory = new javax.swing.JComboBox<>();
        BaddR = new javax.swing.JButton();
        SProoms = new javax.swing.JScrollPane();
        Lrooms = new javax.swing.JList<>();
        pforCategory = new javax.swing.JPanel();
        LnameC = new javax.swing.JLabel();
        TnameC = new javax.swing.JTextField();
        LdescC = new javax.swing.JLabel();
        TdescC = new javax.swing.JTextField();
        LpriceC = new javax.swing.JLabel();
        SpriceC = new javax.swing.JSpinner();
        CBcurC = new javax.swing.JComboBox<>();
        BaddC = new javax.swing.JButton();
        SPcategories = new javax.swing.JScrollPane();
        Lcategories = new javax.swing.JList<>();
        BcreateP = new javax.swing.JButton();
        PseeRH = new javax.swing.JPanel();
        LchooseR1 = new javax.swing.JLabel();
        CBchooseR1 = new javax.swing.JComboBox<>();
        SPhistoryR1 = new javax.swing.JScrollPane();
        LhistoryR1 = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("gui/Bundle"); // NOI18N
        setTitle(bundle.getString("Window.title")); // NOI18N
        setMinimumSize(new java.awt.Dimension(670, 430));
        setSize(new java.awt.Dimension(670, 430));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        Pmenu.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Pmenu.setMinimumSize(new java.awt.Dimension(150, 430));
        Pmenu.setPreferredSize(new java.awt.Dimension(150, 430));
        Pmenu.setLayout(new java.awt.GridBagLayout());

        BcreateU.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        BcreateU.setText(bundle.getString("Window.BcreateU.text")); // NOI18N
        BcreateU.setToolTipText(bundle.getString("Window.BcreateU.toolTipText")); // NOI18N
        BcreateU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BcreateUActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.083;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 1);
        Pmenu.add(BcreateU, gridBagConstraints);

        BmakeR.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        BmakeR.setText(bundle.getString("Window.BmakeR.text")); // NOI18N
        BmakeR.setToolTipText(bundle.getString("Window.BmakeR.toolTipText")); // NOI18N
        BmakeR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BmakeRActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.083;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 1);
        Pmenu.add(BmakeR, gridBagConstraints);

        BuseO.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        BuseO.setText(bundle.getString("Window.BuseO.text")); // NOI18N
        BuseO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuseOActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.083;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 1);
        Pmenu.add(BuseO, gridBagConstraints);

        BcancelR.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        BcancelR.setText(bundle.getString("Window.BcancelR.text")); // NOI18N
        BcancelR.setToolTipText(bundle.getString("Window.BcancelR.toolTipText")); // NOI18N
        BcancelR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BcancelRActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.083;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 1);
        Pmenu.add(BcancelR, gridBagConstraints);

        BpayR.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        BpayR.setText(bundle.getString("Window.BpayR.text")); // NOI18N
        BpayR.setToolTipText(bundle.getString("Window.BpayR.toolTipText")); // NOI18N
        BpayR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BpayRActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.083;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 1);
        Pmenu.add(BpayR, gridBagConstraints);

        BseeUH.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        BseeUH.setText(bundle.getString("Window.BseeUH.text")); // NOI18N
        BseeUH.setToolTipText(bundle.getString("Window.BseeUH.toolTipText")); // NOI18N
        BseeUH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BseeUHActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.083;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 1);
        Pmenu.add(BseeUH, gridBagConstraints);

        BaddH.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        BaddH.setText(bundle.getString("Window.BaddH.text")); // NOI18N
        BaddH.setToolTipText(bundle.getString("Window.BaddH.toolTipText")); // NOI18N
        BaddH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BaddHActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.083;
        gridBagConstraints.insets = new java.awt.Insets(5, 2, 0, 1);
        Pmenu.add(BaddH, gridBagConstraints);

        BseeR.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        BseeR.setText(bundle.getString("Window.BseeR.text")); // NOI18N
        BseeR.setToolTipText(bundle.getString("Window.BseeR.toolTipText")); // NOI18N
        BseeR.setActionCommand(bundle.getString("Window.BseeR.actionCommand")); // NOI18N
        BseeR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BseeRActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.083;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 1);
        Pmenu.add(BseeR, gridBagConstraints);

        BseeRH.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        BseeRH.setText(bundle.getString("Window.BseeRH.text")); // NOI18N
        BseeRH.setToolTipText(bundle.getString("Window.BseeRH.toolTipText")); // NOI18N
        BseeRH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BseeRHActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.083;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 1);
        Pmenu.add(BseeRH, gridBagConstraints);

        Slanguage.setMaximum(1);
        Slanguage.setToolTipText(bundle.getString("Window.Slanguage.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.weighty = 0.083;
        Pmenu.add(Slanguage, gridBagConstraints);
        Slanguage.addChangeListener(new ChangeListener () {
            public void stateChanged(ChangeEvent e)
            {
                Locale l;
                if (Slanguage.getValue() == 1){l=new Locale("en");}
                else{l=new Locale("sk", "SK");}

                ResourceBundle r = ResourceBundle.getBundle("gui/Bundle", l);

                BcreateU.setText(r.getString("Window.BcreateU.text"));
                BmakeR.setText(r.getString("Window.BmakeR.text"));
                BuseO.setText(r.getString("Window.BuseO.text"));
                BcancelR.setText(r.getString("Window.BcancelR.text"));
                BpayR.setText(r.getString("Window.BpayR.text"));
                BseeR.setText(r.getString("Window.BseeR.text"));
                BseeUH.setText(r.getString("Window.BseeUH.text"));
                BaddH.setText(r.getString("Window.BaddH.text"));
                BseeRH.setText(r.getString("Window.BseeRH.text"));
                Bexit.setText(r.getString("Window.Bexit.text"));
                Bopen.setText(r.getString("Window.Bopen.text"));
                Bsave.setText(r.getString("Window.Bsave.text"));
            }
        });

        Lsk.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Lsk.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Lsk.setText(bundle.getString("Window.Lsk.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.083;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        Pmenu.add(Lsk, gridBagConstraints);

        Leng.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Leng.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Leng.setText(bundle.getString("Window.Leng.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.083;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 1);
        Pmenu.add(Leng, gridBagConstraints);

        Sdate.setModel(new javax.swing.SpinnerDateModel());
        Sdate.setEditor(new javax.swing.JSpinner.DateEditor(Sdate, "dd-MM-yyyy"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.weighty = 0.083;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 1);
        Pmenu.add(Sdate, gridBagConstraints);
        Sdate.addChangeListener(new ChangeListener () {
            public void stateChanged(ChangeEvent e)
            {
                SpinnerDateModel s1 = (SpinnerDateModel)Sfrom.getModel();
                s1.setValue(Sdate.getValue());
                s1.setStart((Comparable) Sdate.getValue());

                SpinnerDateModel s2 = (SpinnerDateModel)Still.getModel();
                s2.setValue(Sdate.getValue());
                s2.setStart((Comparable) Sdate.getValue());
            }
        });

        Bexit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Bexit.setText(bundle.getString("Window.Bexit.text")); // NOI18N
        Bexit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BexitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.087;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 1);
        Pmenu.add(Bexit, gridBagConstraints);

        Bopen.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Bopen.setText(bundle.getString("Window.Bopen.text")); // NOI18N
        Bopen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BopenActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.083;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        Pmenu.add(Bopen, gridBagConstraints);

        Bsave.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Bsave.setText(bundle.getString("Window.Bsave.text")); // NOI18N
        Bsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BsaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.083;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 1);
        Pmenu.add(Bsave, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(Pmenu, gridBagConstraints);

        Pcontent.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        Pcontent.setMinimumSize(new java.awt.Dimension(520, 430));
        Pcontent.setPreferredSize(new java.awt.Dimension(520, 430));
        Pcontent.setLayout(new java.awt.CardLayout());

        PcreateU.setLayout(new java.awt.GridBagLayout());

        BGgender.add(Bmr);
        Bmr.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        Bmr.setText(bundle.getString("Window.Bmr.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.166;
        gridBagConstraints.insets = new java.awt.Insets(8, 2, 2, 2);
        PcreateU.add(Bmr, gridBagConstraints);

        BGgender.add(Bmrs);
        Bmrs.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        Bmrs.setText(bundle.getString("Window.Bmrs.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.166;
        gridBagConstraints.insets = new java.awt.Insets(8, 2, 2, 14);
        PcreateU.add(Bmrs, gridBagConstraints);

        Lname.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Lname.setText(bundle.getString("Window.Lname.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.weighty = 0.166;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 6);
        PcreateU.add(Lname, gridBagConstraints);

        Tname.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.6;
        gridBagConstraints.weighty = 0.166;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 14);
        PcreateU.add(Tname, gridBagConstraints);

        Lemail.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Lemail.setText(bundle.getString("Window.Lemail.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.weighty = 0.166;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 6);
        PcreateU.add(Lemail, gridBagConstraints);

        Temail.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.6;
        gridBagConstraints.weighty = 0.166;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 14);
        PcreateU.add(Temail, gridBagConstraints);

        Lcountry.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Lcountry.setText(bundle.getString("Window.Lcountry.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.weighty = 0.166;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 6);
        PcreateU.add(Lcountry, gridBagConstraints);

        Tcountry.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.6;
        gridBagConstraints.weighty = 0.166;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 14);
        PcreateU.add(Tcountry, gridBagConstraints);

        Laddress.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Laddress.setText(bundle.getString("Window.Laddress.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.weighty = 0.166;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 6);
        PcreateU.add(Laddress, gridBagConstraints);

        Taddress.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.6;
        gridBagConstraints.weighty = 0.166;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 14);
        PcreateU.add(Taddress, gridBagConstraints);

        Bcreate.setText(bundle.getString("Window.Bcreate.text")); // NOI18N
        Bcreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BcreateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.166;
        gridBagConstraints.insets = new java.awt.Insets(7, 10, 3, 14);
        PcreateU.add(Bcreate, gridBagConstraints);

        Pcontent.add(PcreateU, "createU");

        PmakeR.setLayout(new java.awt.GridBagLayout());

        PforUser.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        PforUser.setLayout(new java.awt.GridBagLayout());

        LselectU.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LselectU.setText(bundle.getString("Window.LselectU.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 0);
        PforUser.add(LselectU, gridBagConstraints);

        CBpeople.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        CBpeople.setModel(new javax.swing.DefaultComboBoxModel());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.6;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 11);
        PforUser.add(CBpeople, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.1;
        PmakeR.add(PforUser, gridBagConstraints);

        PforWishes.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        PforWishes.setLayout(new java.awt.GridBagLayout());

        Lsetdate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Lsetdate.setText(bundle.getString("Window.Lsetdate.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.25;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 2);
        PforWishes.add(Lsetdate, gridBagConstraints);

        Lfrom.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Lfrom.setText(bundle.getString("Window.Lfrom.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.25;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(3, 1, 1, 1);
        PforWishes.add(Lfrom, gridBagConstraints);

        Sfrom.setModel(new javax.swing.SpinnerDateModel());
        Sfrom.setEditor(new javax.swing.JSpinner.DateEditor(Sfrom, "dd-MM-yyyy"));
        ((SpinnerDateModel)Sfrom.getModel()).setStart((Comparable) Sfrom.getPreviousValue());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.25;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 3, 1);
        PforWishes.add(Sfrom, gridBagConstraints);
        Sfrom.addChangeListener(new ChangeListener () {
            public void stateChanged(ChangeEvent e)
            {
                ((DefaultListModel)LavailableRooms.getModel()).removeAllElements();
                LtotalSum.setText("");
            }
        });

        Ltill.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Ltill.setText(bundle.getString("Window.Ltill.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.25;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(3, 1, 1, 1);
        PforWishes.add(Ltill, gridBagConstraints);

        Still.setModel(new javax.swing.SpinnerDateModel());
        Still.setEditor(new javax.swing.JSpinner.DateEditor(Still, "dd-MM-yyyy"));
        ((SpinnerDateModel)Still.getModel()).setStart((Comparable) Still.getPreviousValue());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.25;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 3, 1);
        PforWishes.add(Still, gridBagConstraints);
        Still.addChangeListener(new ChangeListener () {
            public void stateChanged(ChangeEvent e)
            {
                ((DefaultListModel)LavailableRooms.getModel()).removeAllElements();
                LtotalSum.setText("");
            }
        });

        Bsearch.setText(bundle.getString("Window.Bsearch.text")); // NOI18N
        Bsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BsearchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.25;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 4);
        PforWishes.add(Bsearch, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        PmakeR.add(PforWishes, gridBagConstraints);

        PforReserve.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        PforReserve.setLayout(new java.awt.GridBagLayout());

        LchooseRoom.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LchooseRoom.setText(bundle.getString("Window.LchooseRoom.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 2, 4);
        PforReserve.add(LchooseRoom, gridBagConstraints);

        LavailableRooms.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        LavailableRooms.setModel(new javax.swing.DefaultListModel());
        SPavailableRooms.setViewportView(LavailableRooms);
        LavailableRooms.addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent e) {
                Room selectedRoom = null;
                try {DefaultListModel model = (DefaultListModel)LavailableRooms.getModel();
                    selectedRoom = (Room) model.getElementAt(LavailableRooms.getSelectedIndex());}
                catch (Exception ex) {return;}
                Date from = (Date) Sfrom.getValue();
                Date till = (Date) Still.getValue();
                long timeDiff = till.getTime() - from.getTime();
                int duration = (int) (timeDiff / (1000 * 60 * 60* 24));

                Float total = duration * selectedRoom.getCategory().getPricePerDay();
                if(selectedRoom.getCondition() < duration)
                {total *= (Float)(1- 0.01f*selectedRoom.getDiscount());}

                LtotalSum.setText(String.valueOf(total) + " " + selectedRoom.getCategory().getCurrency());
            }});

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridheight = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 0.7;
            gridBagConstraints.weighty = 0.8;
            gridBagConstraints.insets = new java.awt.Insets(1, 4, 4, 1);
            PforReserve.add(SPavailableRooms, gridBagConstraints);

            Ltotal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            Ltotal.setText(bundle.getString("Window.Ltotal.text")); // NOI18N
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 0.3;
            gridBagConstraints.weighty = 0.2;
            gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 4);
            PforReserve.add(Ltotal, gridBagConstraints);

            LtotalSum.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
            LtotalSum.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 0.3;
            gridBagConstraints.weighty = 0.2;
            gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 4);
            PforReserve.add(LtotalSum, gridBagConstraints);

            Breserve.setText(bundle.getString("Window.Breserve.text")); // NOI18N
            Breserve.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    BreserveActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 0.3;
            gridBagConstraints.weighty = 0.4;
            gridBagConstraints.insets = new java.awt.Insets(7, 2, 4, 4);
            PforReserve.add(Breserve, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 0.2;
            PmakeR.add(PforReserve, gridBagConstraints);

            Pcontent.add(PmakeR, "makeR");

            PuseO.setLayout(new java.awt.GridBagLayout());

            LchooseReser.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            LchooseReser.setText(bundle.getString("Window.LchooseReser.text")); // NOI18N
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 0.4;
            gridBagConstraints.weighty = 0.1;
            gridBagConstraints.insets = new java.awt.Insets(4, 4, 3, 1);
            PuseO.add(LchooseReser, gridBagConstraints);

            Lreser.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
            Lreser.setModel(new javax.swing.DefaultListModel());
            SPreser.setViewportView(Lreser);
            Lreser.addListSelectionListener(new ListSelectionListener(){
                public void valueChanged(ListSelectionEvent e) {
                    Reservation selectedReservation = null;
                    try {DefaultListModel model = (DefaultListModel)Lreser.getModel();
                        selectedReservation = (Reservation) model.getElementAt(Lreser.getSelectedIndex());}
                    catch (Exception ex) {return;}

                    ((DefaultComboBoxModel)CBoffers.getModel()).removeAllElements();
                    ((DefaultComboBoxModel)CBoffers.getModel()).addAll(selectedReservation.getHotel().getOffers());
                    ((DefaultListModel)LreserO.getModel()).removeAllElements();
                    Lsum.setText("");

                }});

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.gridheight = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 0.4;
                gridBagConstraints.weighty = 0.8;
                gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
                PuseO.add(SPreser, gridBagConstraints);

                LchooseO.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                LchooseO.setText(bundle.getString("Window.LchooseO.text")); // NOI18N
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 0.6;
                gridBagConstraints.weighty = 0.1;
                gridBagConstraints.insets = new java.awt.Insets(4, 1, 3, 4);
                PuseO.add(LchooseO, gridBagConstraints);

                Loffer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                Loffer.setText(bundle.getString("Window.Loffer.text")); // NOI18N
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 0.2;
                gridBagConstraints.weighty = 0.1;
                gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
                PuseO.add(Loffer, gridBagConstraints);

                CBoffers.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                CBoffers.setModel(new javax.swing.DefaultComboBoxModel());
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 0.4;
                gridBagConstraints.weighty = 0.1;
                gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
                PuseO.add(CBoffers, gridBagConstraints);

                Badd.setText(bundle.getString("Window.Badd.text")); // NOI18N
                Badd.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        BaddActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 0.6;
                gridBagConstraints.weighty = 0.1;
                gridBagConstraints.insets = new java.awt.Insets(2, 1, 1, 4);
                PuseO.add(Badd, gridBagConstraints);

                LreserO.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                LreserO.setModel(new javax.swing.DefaultListModel());
                LreserO.setEnabled(false);
                SPreserO.setViewportView(LreserO);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 0.6;
                gridBagConstraints.weighty = 0.5;
                gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
                PuseO.add(SPreserO, gridBagConstraints);

                LaddSum.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                LaddSum.setText(bundle.getString("Window.LaddSum.text")); // NOI18N
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 0.1;
                gridBagConstraints.weighty = 0.1;
                gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
                PuseO.add(LaddSum, gridBagConstraints);

                Lsum.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                Lsum.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 0.1;
                gridBagConstraints.weighty = 0.1;
                gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
                PuseO.add(Lsum, gridBagConstraints);

                Bremember.setText(bundle.getString("Window.Bremember.text")); // NOI18N
                Bremember.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        BrememberActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.gridwidth = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 0.1;
                gridBagConstraints.insets = new java.awt.Insets(3, 4, 4, 4);
                PuseO.add(Bremember, gridBagConstraints);

                Pcontent.add(PuseO, "useO");

                PcancelR.setLayout(new java.awt.GridBagLayout());

                Lcancel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                Lcancel.setText(bundle.getString("Window.Lcancel.text")); // NOI18N
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 0.15;
                gridBagConstraints.insets = new java.awt.Insets(4, 4, 1, 4);
                PcancelR.add(Lcancel, gridBagConstraints);

                Lreservations.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                Lreservations.setModel(new javax.swing.DefaultListModel());
                SPreservations.setViewportView(Lreservations);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 0.7;
                gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 4);
                PcancelR.add(SPreservations, gridBagConstraints);

                Bcancel.setText(bundle.getString("Window.Bcancel.text")); // NOI18N
                Bcancel.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        BcancelActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 0.15;
                gridBagConstraints.insets = new java.awt.Insets(3, 4, 4, 4);
                PcancelR.add(Bcancel, gridBagConstraints);

                Pcontent.add(PcancelR, "cancelR");

                PpayR.setLayout(new java.awt.GridBagLayout());

                LchooseR.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                LchooseR.setText(bundle.getString("Window.LchooseR.text")); // NOI18N
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.gridwidth = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 0.15;
                gridBagConstraints.insets = new java.awt.Insets(3, 4, 0, 3);
                PpayR.add(LchooseR, gridBagConstraints);

                LnotpayedR.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                LnotpayedR.setModel(new javax.swing.DefaultListModel());
                SPnotpayedR.setViewportView(LnotpayedR);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.gridwidth = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 0.55;
                gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 3);
                PpayR.add(SPnotpayedR, gridBagConstraints);

                Lchoosemethod.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                Lchoosemethod.setText(bundle.getString("Window.Lchoosemethod.text")); // NOI18N
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 0.5;
                gridBagConstraints.weighty = 0.15;
                gridBagConstraints.insets = new java.awt.Insets(2, 4, 0, 0);
                PpayR.add(Lchoosemethod, gridBagConstraints);

                BGpayment.add(RBcard);
                RBcard.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                RBcard.setText(bundle.getString("Window.RBcard.text")); // NOI18N
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 0.25;
                gridBagConstraints.weighty = 0.15;
                gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
                PpayR.add(RBcard, gridBagConstraints);

                BGpayment.add(RBcash);
                RBcash.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                RBcash.setText(bundle.getString("Window.RBcash.text")); // NOI18N
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 0.25;
                gridBagConstraints.weighty = 0.15;
                gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 3);
                PpayR.add(RBcash, gridBagConstraints);

                Bpay.setText(bundle.getString("Window.Bpay.text")); // NOI18N
                Bpay.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        BpayActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.gridwidth = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 0.15;
                gridBagConstraints.insets = new java.awt.Insets(2, 4, 3, 3);
                PpayR.add(Bpay, gridBagConstraints);

                Pcontent.add(PpayR, "payR");

                PseeR.setLayout(new javax.swing.BoxLayout(PseeR, javax.swing.BoxLayout.LINE_AXIS));

                LseeNP.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                LseeNP.setModel(new javax.swing.DefaultListModel());
                LseeNP.setEnabled(false);
                SPseeNP.setViewportView(LseeNP);

                PseeR.add(SPseeNP);

                Pcontent.add(PseeR, "seeR");

                PseeUH.setLayout(new java.awt.GridBagLayout());

                LchooseU.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                LchooseU.setText(bundle.getString("Window.LchooseU.text")); // NOI18N
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 0.35;
                gridBagConstraints.weighty = 0.2;
                gridBagConstraints.insets = new java.awt.Insets(4, 4, 1, 1);
                PseeUH.add(LchooseU, gridBagConstraints);

                CBchooseU.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                CBchooseU.setModel(new javax.swing.DefaultComboBoxModel());
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 0.65;
                gridBagConstraints.weighty = 0.2;
                gridBagConstraints.insets = new java.awt.Insets(4, 1, 1, 4);
                PseeUH.add(CBchooseU, gridBagConstraints);
                CBchooseU.addActionListener (new ActionListener () {
                    public void actionPerformed(ActionEvent e) {
                        Person selectedPerson = (Person)CBchooseU.getSelectedItem();
                        ArrayList<Reservation> history = selectedPerson.seeAllReservations(reservations);
                        ((DefaultListModel)LhistoryU.getModel()).removeAllElements();
                        ((DefaultListModel)LhistoryU.getModel()).addAll(history);
                    }});

                    LhistoryU.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                    LhistoryU.setModel(new javax.swing.DefaultListModel());
                    LhistoryU.setEnabled(false);
                    SPhistoryU.setViewportView(LhistoryU);

                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 1;
                    gridBagConstraints.gridwidth = 2;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 1.0;
                    gridBagConstraints.weighty = 0.8;
                    gridBagConstraints.insets = new java.awt.Insets(3, 4, 4, 4);
                    PseeUH.add(SPhistoryU, gridBagConstraints);

                    Pcontent.add(PseeUH, "seeUH");

                    PaddH.setLayout(new java.awt.GridBagLayout());

                    PforHotel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
                    PforHotel.setLayout(new java.awt.GridBagLayout());

                    Lphotos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                    Lphotos.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                    Lphotos.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 0;
                    gridBagConstraints.gridheight = 3;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.5;
                    gridBagConstraints.weighty = 0.6;
                    gridBagConstraints.insets = new java.awt.Insets(3, 3, 1, 1);
                    PforHotel.add(Lphotos, gridBagConstraints);

                    Bchoose.setText(bundle.getString("Window.Bchoose.text")); // NOI18N
                    Bchoose.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            BchooseActionPerformed(evt);
                        }
                    });
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 3;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.5;
                    gridBagConstraints.weighty = 0.2;
                    gridBagConstraints.insets = new java.awt.Insets(1, 3, 1, 1);
                    PforHotel.add(Bchoose, gridBagConstraints);

                    BaddPhoto.setText(bundle.getString("Window.BaddPhoto.text")); // NOI18N
                    BaddPhoto.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            BaddPhotoActionPerformed(evt);
                        }
                    });
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 4;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.5;
                    gridBagConstraints.weighty = 0.2;
                    gridBagConstraints.insets = new java.awt.Insets(1, 3, 3, 1);
                    PforHotel.add(BaddPhoto, gridBagConstraints);

                    LnameH.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                    LnameH.setText(bundle.getString("Window.LnameH.text")); // NOI18N
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 1;
                    gridBagConstraints.gridy = 0;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.2;
                    gridBagConstraints.weighty = 0.2;
                    gridBagConstraints.insets = new java.awt.Insets(3, 1, 1, 1);
                    PforHotel.add(LnameH, gridBagConstraints);

                    TnameH.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 2;
                    gridBagConstraints.gridy = 0;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.3;
                    gridBagConstraints.weighty = 0.2;
                    gridBagConstraints.insets = new java.awt.Insets(3, 1, 1, 3);
                    PforHotel.add(TnameH, gridBagConstraints);

                    LcountryH.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                    LcountryH.setText(bundle.getString("Window.LcountryH.text")); // NOI18N
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 1;
                    gridBagConstraints.gridy = 1;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.2;
                    gridBagConstraints.weighty = 0.2;
                    gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
                    PforHotel.add(LcountryH, gridBagConstraints);

                    TcountryH.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 2;
                    gridBagConstraints.gridy = 1;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.3;
                    gridBagConstraints.weighty = 0.2;
                    gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 3);
                    PforHotel.add(TcountryH, gridBagConstraints);

                    LaddressH.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                    LaddressH.setText(bundle.getString("Window.LaddressH.text")); // NOI18N
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 1;
                    gridBagConstraints.gridy = 2;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.2;
                    gridBagConstraints.weighty = 0.2;
                    gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
                    PforHotel.add(LaddressH, gridBagConstraints);

                    TaddressH.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 2;
                    gridBagConstraints.gridy = 2;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.3;
                    gridBagConstraints.weighty = 0.2;
                    gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 3);
                    PforHotel.add(TaddressH, gridBagConstraints);

                    LownerH.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                    LownerH.setText(bundle.getString("Window.LownerH.text")); // NOI18N
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 1;
                    gridBagConstraints.gridy = 3;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.2;
                    gridBagConstraints.weighty = 0.2;
                    gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
                    PforHotel.add(LownerH, gridBagConstraints);

                    TownerH.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 2;
                    gridBagConstraints.gridy = 3;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.3;
                    gridBagConstraints.weighty = 0.2;
                    gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 3);
                    PforHotel.add(TownerH, gridBagConstraints);

                    LemailH.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                    LemailH.setText(bundle.getString("Window.LemailH.text")); // NOI18N
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 1;
                    gridBagConstraints.gridy = 4;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.2;
                    gridBagConstraints.weighty = 0.2;
                    gridBagConstraints.insets = new java.awt.Insets(1, 1, 3, 1);
                    PforHotel.add(LemailH, gridBagConstraints);

                    TemailH.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 2;
                    gridBagConstraints.gridy = 4;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.3;
                    gridBagConstraints.weighty = 0.2;
                    gridBagConstraints.insets = new java.awt.Insets(1, 1, 3, 3);
                    PforHotel.add(TemailH, gridBagConstraints);

                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 0;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.6;
                    gridBagConstraints.weighty = 0.45;
                    PaddH.add(PforHotel, gridBagConstraints);

                    pforOffer.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
                    pforOffer.setLayout(new java.awt.GridBagLayout());

                    LnameO.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                    LnameO.setText(bundle.getString("Window.LnameO.text")); // NOI18N
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 0;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.4;
                    gridBagConstraints.weighty = 0.1;
                    gridBagConstraints.insets = new java.awt.Insets(3, 3, 1, 1);
                    pforOffer.add(LnameO, gridBagConstraints);

                    TnameO.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 1;
                    gridBagConstraints.gridy = 0;
                    gridBagConstraints.gridwidth = 2;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.6;
                    gridBagConstraints.weighty = 0.1;
                    gridBagConstraints.insets = new java.awt.Insets(3, 1, 1, 3);
                    pforOffer.add(TnameO, gridBagConstraints);

                    LdescO.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                    LdescO.setText(bundle.getString("Window.LdescO.text")); // NOI18N
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 1;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.4;
                    gridBagConstraints.weighty = 0.1;
                    gridBagConstraints.insets = new java.awt.Insets(1, 3, 1, 1);
                    pforOffer.add(LdescO, gridBagConstraints);

                    TdescO.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 1;
                    gridBagConstraints.gridy = 1;
                    gridBagConstraints.gridwidth = 2;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.6;
                    gridBagConstraints.weighty = 0.1;
                    gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 3);
                    pforOffer.add(TdescO, gridBagConstraints);

                    LpriceO.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                    LpriceO.setText(bundle.getString("Window.LpriceO.text")); // NOI18N
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 2;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.4;
                    gridBagConstraints.weighty = 0.1;
                    gridBagConstraints.insets = new java.awt.Insets(1, 3, 1, 1);
                    pforOffer.add(LpriceO, gridBagConstraints);

                    SpriceO.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                    SpriceO.setModel(new javax.swing.SpinnerNumberModel(0.0f, 0.0f, null, 1.0f));
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 1;
                    gridBagConstraints.gridy = 2;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.3;
                    gridBagConstraints.weighty = 0.1;
                    gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
                    pforOffer.add(SpriceO, gridBagConstraints);

                    CBcurO.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                    CBcurO.setMaximumRowCount(2);
                    CBcurO.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "EUR" }));
                    CBcurO.setSelectedIndex(-1);
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 2;
                    gridBagConstraints.gridy = 2;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.3;
                    gridBagConstraints.weighty = 0.1;
                    gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 3);
                    pforOffer.add(CBcurO, gridBagConstraints);

                    BaddO.setText(bundle.getString("Window.BaddO.text")); // NOI18N
                    BaddO.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            BaddOActionPerformed(evt);
                        }
                    });
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 3;
                    gridBagConstraints.gridwidth = 3;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 1.0;
                    gridBagConstraints.weighty = 0.1;
                    gridBagConstraints.insets = new java.awt.Insets(1, 3, 1, 3);
                    pforOffer.add(BaddO, gridBagConstraints);

                    Loffers.setModel(new javax.swing.DefaultListModel());
                    SPoffers.setViewportView(Loffers);

                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 4;
                    gridBagConstraints.gridwidth = 3;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 1.0;
                    gridBagConstraints.weighty = 0.6;
                    gridBagConstraints.insets = new java.awt.Insets(1, 3, 3, 3);
                    pforOffer.add(SPoffers, gridBagConstraints);

                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 1;
                    gridBagConstraints.gridy = 0;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.4;
                    gridBagConstraints.weighty = 0.45;
                    PaddH.add(pforOffer, gridBagConstraints);

                    PforRoom.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
                    PforRoom.setLayout(new java.awt.GridBagLayout());

                    LnumberR.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                    LnumberR.setText(bundle.getString("Window.LnumberR.text")); // NOI18N
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 0;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.4;
                    gridBagConstraints.weighty = 0.1;
                    gridBagConstraints.insets = new java.awt.Insets(4, 3, 1, 1);
                    PforRoom.add(LnumberR, gridBagConstraints);

                    TnumberR.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 1;
                    gridBagConstraints.gridy = 0;
                    gridBagConstraints.gridwidth = 3;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.6;
                    gridBagConstraints.weighty = 0.1;
                    gridBagConstraints.insets = new java.awt.Insets(4, 1, 1, 3);
                    PforRoom.add(TnumberR, gridBagConstraints);

                    Sdiscount.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                    Sdiscount.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 5));
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 1;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.4;
                    gridBagConstraints.weighty = 0.1;
                    gridBagConstraints.insets = new java.awt.Insets(1, 3, 1, 1);
                    PforRoom.add(Sdiscount, gridBagConstraints);

                    Ldiscount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                    Ldiscount.setText(bundle.getString("Window.Ldiscount.text")); // NOI18N
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 1;
                    gridBagConstraints.gridy = 1;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.3;
                    gridBagConstraints.weighty = 0.1;
                    gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
                    PforRoom.add(Ldiscount, gridBagConstraints);

                    Scondition.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 2;
                    gridBagConstraints.gridy = 1;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.15;
                    gridBagConstraints.weighty = 0.1;
                    gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
                    PforRoom.add(Scondition, gridBagConstraints);

                    Lcondition.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                    Lcondition.setText(bundle.getString("Window.Lcondition.text")); // NOI18N
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 3;
                    gridBagConstraints.gridy = 1;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.15;
                    gridBagConstraints.weighty = 0.1;
                    gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 3);
                    PforRoom.add(Lcondition, gridBagConstraints);

                    Lcategory.setText(bundle.getString("Window.Lcategory.text")); // NOI18N
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 2;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.4;
                    gridBagConstraints.weighty = 0.1;
                    gridBagConstraints.insets = new java.awt.Insets(1, 3, 1, 1);
                    PforRoom.add(Lcategory, gridBagConstraints);

                    CBcategory.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                    CBcategory.setModel(new javax.swing.DefaultComboBoxModel());
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 1;
                    gridBagConstraints.gridy = 2;
                    gridBagConstraints.gridwidth = 3;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.6;
                    gridBagConstraints.weighty = 0.1;
                    gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 3);
                    PforRoom.add(CBcategory, gridBagConstraints);

                    BaddR.setText(bundle.getString("Window.BaddR.text")); // NOI18N
                    BaddR.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            BaddRActionPerformed(evt);
                        }
                    });
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 3;
                    gridBagConstraints.gridwidth = 4;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 1.0;
                    gridBagConstraints.weighty = 0.1;
                    gridBagConstraints.insets = new java.awt.Insets(1, 3, 1, 3);
                    PforRoom.add(BaddR, gridBagConstraints);

                    Lrooms.setModel(new javax.swing.DefaultListModel());
                    SProoms.setViewportView(Lrooms);

                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 4;
                    gridBagConstraints.gridwidth = 4;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 1.0;
                    gridBagConstraints.weighty = 0.6;
                    gridBagConstraints.insets = new java.awt.Insets(1, 3, 4, 3);
                    PforRoom.add(SProoms, gridBagConstraints);

                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 1;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.6;
                    gridBagConstraints.weighty = 0.45;
                    PaddH.add(PforRoom, gridBagConstraints);

                    pforCategory.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
                    pforCategory.setLayout(new java.awt.GridBagLayout());

                    LnameC.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                    LnameC.setText(bundle.getString("Window.LnameC.text")); // NOI18N
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 0;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.4;
                    gridBagConstraints.weighty = 0.1;
                    gridBagConstraints.insets = new java.awt.Insets(3, 3, 1, 1);
                    pforCategory.add(LnameC, gridBagConstraints);

                    TnameC.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 1;
                    gridBagConstraints.gridy = 0;
                    gridBagConstraints.gridwidth = 2;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.6;
                    gridBagConstraints.weighty = 0.1;
                    gridBagConstraints.insets = new java.awt.Insets(3, 1, 1, 3);
                    pforCategory.add(TnameC, gridBagConstraints);

                    LdescC.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                    LdescC.setText(bundle.getString("Window.LdescC.text")); // NOI18N
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 1;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.4;
                    gridBagConstraints.weighty = 0.1;
                    gridBagConstraints.insets = new java.awt.Insets(1, 3, 1, 1);
                    pforCategory.add(LdescC, gridBagConstraints);

                    TdescC.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 1;
                    gridBagConstraints.gridy = 1;
                    gridBagConstraints.gridwidth = 2;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.6;
                    gridBagConstraints.weighty = 0.1;
                    gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 3);
                    pforCategory.add(TdescC, gridBagConstraints);

                    LpriceC.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                    LpriceC.setText(bundle.getString("Window.LpriceC.text")); // NOI18N
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 2;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.4;
                    gridBagConstraints.weighty = 0.1;
                    gridBagConstraints.insets = new java.awt.Insets(1, 3, 1, 1);
                    pforCategory.add(LpriceC, gridBagConstraints);

                    SpriceC.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                    SpriceC.setModel(new javax.swing.SpinnerNumberModel(0.0f, 0.0f, null, 1.0f));
                    SpriceC.setToolTipText(bundle.getString("Window.SpriceC.toolTipText")); // NOI18N
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 1;
                    gridBagConstraints.gridy = 2;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.3;
                    gridBagConstraints.weighty = 0.1;
                    gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
                    pforCategory.add(SpriceC, gridBagConstraints);

                    CBcurC.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                    CBcurC.setMaximumRowCount(2);
                    CBcurC.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "EUR" }));
                    CBcurC.setSelectedIndex(-1);
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 2;
                    gridBagConstraints.gridy = 2;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.3;
                    gridBagConstraints.weighty = 0.1;
                    gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 3);
                    pforCategory.add(CBcurC, gridBagConstraints);

                    BaddC.setText(bundle.getString("Window.BaddC.text")); // NOI18N
                    BaddC.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            BaddCActionPerformed(evt);
                        }
                    });
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 3;
                    gridBagConstraints.gridwidth = 3;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 1.0;
                    gridBagConstraints.weighty = 0.1;
                    gridBagConstraints.insets = new java.awt.Insets(1, 3, 1, 3);
                    pforCategory.add(BaddC, gridBagConstraints);

                    Lcategories.setModel(new javax.swing.DefaultListModel());
                    SPcategories.setViewportView(Lcategories);

                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 4;
                    gridBagConstraints.gridwidth = 3;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 1.0;
                    gridBagConstraints.weighty = 0.6;
                    gridBagConstraints.insets = new java.awt.Insets(1, 3, 3, 3);
                    pforCategory.add(SPcategories, gridBagConstraints);

                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 1;
                    gridBagConstraints.gridy = 1;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.4;
                    gridBagConstraints.weighty = 0.45;
                    PaddH.add(pforCategory, gridBagConstraints);

                    BcreateP.setText(bundle.getString("Window.BcreateP.text")); // NOI18N
                    BcreateP.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            BcreatePActionPerformed(evt);
                        }
                    });
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 2;
                    gridBagConstraints.gridwidth = 2;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 1.0;
                    gridBagConstraints.weighty = 0.1;
                    PaddH.add(BcreateP, gridBagConstraints);

                    Pcontent.add(PaddH, "addH");

                    PseeRH.setLayout(new java.awt.GridBagLayout());

                    LchooseR1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                    LchooseR1.setText(bundle.getString("Window.LchooseR1.text")); // NOI18N
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 0;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.35;
                    gridBagConstraints.weighty = 0.2;
                    gridBagConstraints.insets = new java.awt.Insets(4, 4, 1, 1);
                    PseeRH.add(LchooseR1, gridBagConstraints);

                    CBchooseR1.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                    CBchooseR1.setModel(new javax.swing.DefaultComboBoxModel());
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 1;
                    gridBagConstraints.gridy = 0;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 0.65;
                    gridBagConstraints.weighty = 0.2;
                    gridBagConstraints.insets = new java.awt.Insets(4, 1, 1, 4);
                    PseeRH.add(CBchooseR1, gridBagConstraints);
                    CBchooseR1.addActionListener (new ActionListener () {
                        public void actionPerformed(ActionEvent e) {
                            Room selectedRoom = (Room)CBchooseR1.getSelectedItem();
                            ArrayList<Reservation> history = selectedRoom.seeAllReservations(reservations);
                            ((DefaultListModel)LhistoryR1.getModel()).removeAllElements();
                            ((DefaultListModel)LhistoryR1.getModel()).addAll(history);
                        }});

                        LhistoryR1.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                        LhistoryR1.setModel(new javax.swing.DefaultListModel());
                        LhistoryR1.setEnabled(false);
                        SPhistoryR1.setViewportView(LhistoryR1);

                        gridBagConstraints = new java.awt.GridBagConstraints();
                        gridBagConstraints.gridx = 0;
                        gridBagConstraints.gridy = 1;
                        gridBagConstraints.gridwidth = 2;
                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                        gridBagConstraints.weightx = 1.0;
                        gridBagConstraints.weighty = 0.8;
                        gridBagConstraints.insets = new java.awt.Insets(3, 4, 4, 4);
                        PseeRH.add(SPhistoryR1, gridBagConstraints);

                        Pcontent.add(PseeRH, "seeRH");

                        gridBagConstraints = new java.awt.GridBagConstraints();
                        gridBagConstraints.gridx = 1;
                        gridBagConstraints.gridy = 0;
                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                        gridBagConstraints.weightx = 0.7;
                        gridBagConstraints.weighty = 1.0;
                        getContentPane().add(Pcontent, gridBagConstraints);

                        pack();
                    }// </editor-fold>//GEN-END:initComponents

    private void BexitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BexitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_BexitActionPerformed

    private void BcreateUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BcreateUActionPerformed
        Tname.setText("");
        Temail.setText("");
        Tcountry.setText("");
        Taddress.setText("");
        BGgender.clearSelection();

        CardLayout card = (CardLayout)Pcontent.getLayout();
        card.show(Pcontent, "createU");
    }//GEN-LAST:event_BcreateUActionPerformed

    private void BcreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BcreateActionPerformed
        String name = Tname.getText();
        String email = Temail.getText();
        String country = Tcountry.getText();
        String address = Taddress.getText();
        boolean gender = false;;
        if (Bmrs.isSelected()) {gender = true;}
        
        if(name.isBlank() || email.isBlank() || country.isBlank() || address.isBlank() || (Bmr.isSelected() == false && Bmrs.isSelected() == false))
        {
            LOGGER.log(Level.WARNING, "An attempt to add a new user without all necessary information.");
            JOptionPane.showMessageDialog(this, "All information should be added!", "ERROR",JOptionPane.WARNING_MESSAGE);
        }
        else
        {
            Person newPerson = new Person(gender, name, country, address, email);
            people.add(newPerson);
            
            Tname.setText("");
            Temail.setText("");
            Tcountry.setText("");
            Taddress.setText("");
            BGgender.clearSelection();
            
            LOGGER.log(Level.INFO, "New user was added.");
            JOptionPane.showMessageDialog(this, "The new user was added!", "THANK YOU",JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_BcreateActionPerformed

    private void BmakeRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BmakeRActionPerformed
        ((DefaultComboBoxModel)CBpeople.getModel()).removeAllElements();
        ((DefaultComboBoxModel)CBpeople.getModel()).addAll(people);
        
        Sfrom.setValue(Sdate.getValue());
        Still.setValue(Sdate.getValue());
        
        CardLayout card = (CardLayout)Pcontent.getLayout();
        card.show(Pcontent, "makeR");
    }//GEN-LAST:event_BmakeRActionPerformed

    private void BaddHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BaddHActionPerformed
        clearPaddP();

        CardLayout card = (CardLayout)Pcontent.getLayout();
        card.show(Pcontent, "addH");
    }//GEN-LAST:event_BaddHActionPerformed

    private void BchooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BchooseActionPerformed
        JFileChooser Chooser = new JFileChooser(); //creating a new selecting file window
        Chooser.setFileSelectionMode(JFileChooser.FILES_ONLY); //directories can't be choosen
        Chooser.setAcceptAllFileFilterUsed(false);        
        // add some new filters
        Chooser.addChoosableFileFilter(new FileNameExtensionFilter("PNG Images", "png"));
        Chooser.addChoosableFileFilter(new FileNameExtensionFilter("JPEG Images", "jpeg", "jpg"));
        
        try {
            if (Chooser.showDialog(this, "Choose") == Chooser.APPROVE_OPTION){ //if the person pressed Chooser
            try {
                choosedPhoto = Chooser.getSelectedFile();
                BufferedImage img = ImageIO.read(Chooser.getSelectedFile()); // read the input image
                ImageIcon imgIcon = new ImageIcon(img); // get an image
                Image image = imgIcon.getImage(); 
                Image newimg = image.getScaledInstance(170, 110,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                imgIcon = new ImageIcon(newimg);  // transform it back
                Lphotos.setIcon(imgIcon); // display the image
            } catch (IOException ex) {
                LOGGER.log(Level.WARNING, "Can not read an image.");
                JOptionPane.showMessageDialog(this, "ERROR during reading the image! Try again...", "ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }} //if the person pressed CANCEL
            else{
                JOptionPane.showMessageDialog(this, "You did NOT attach any picture!", "ATTENTION",JOptionPane.WARNING_MESSAGE);
            }}
        catch (Exception ex) {
                // in case file has image type, but it is not an image
                LOGGER.log(Level.WARNING, "Trying to add not an image.");
                JOptionPane.showMessageDialog(this, "Can NOT read an image!", "ATTENTION",JOptionPane.ERROR_MESSAGE);
            }
    }//GEN-LAST:event_BchooseActionPerformed

    private void BaddPhotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BaddPhotoActionPerformed
         if(choosedPhoto != null)
         {
             File picture = new File(choosedPhoto.getAbsolutePath());
             choosedPhoto = null;
             Lphotos.setIcon(null);
             photos.add(picture);
             JOptionPane.showMessageDialog(this, "The picture was successfully added!", "THANK YOU",JOptionPane.INFORMATION_MESSAGE);  
         }
         else
         {
             LOGGER.log(Level.WARNING, "An attempt to add an empty image.");
             JOptionPane.showMessageDialog(this, "Please, select an image first!", "ERROR",JOptionPane.ERROR_MESSAGE);
         }
    }//GEN-LAST:event_BaddPhotoActionPerformed

    private void BaddOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BaddOActionPerformed
        String offer = TnameO.getText();
        String description = TdescO.getText();
        Float price = (Float) SpriceO.getValue();
        String cur = "EUR";
        if ((int)CBcurO.getSelectedIndex() == 1) {cur = "USD";}
        
        if(offer.isBlank() || description.isBlank() || price == 0f || CBcurO.getSelectedIndex() == -1)
        {
            LOGGER.log(Level.WARNING, "An attempt to add a new offer without all necessary information.");
            JOptionPane.showMessageDialog(this, "All information should be added!", "ERROR",JOptionPane.WARNING_MESSAGE);
        }
        else
        {
            Offer newOffer = new Offer(offer, description, cur, price);
            offers.add(newOffer);
            ((DefaultListModel)Loffers.getModel()).addElement(newOffer);
                        
            TnameO.setText("");
            TdescO.setText("");
            SpriceO.setValue(0f);
            CBcurO.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_BaddOActionPerformed

    private void BaddCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BaddCActionPerformed
        String category = TnameC.getText();
        String description = TdescC.getText();
        Float pricePerDay = (Float) SpriceC.getValue();
        String cur = "EUR";
        if ((int)CBcurC.getSelectedIndex() == 1) {cur = "USD";}
        
        if(category.isBlank() || description.isBlank() || pricePerDay == 0f || CBcurC.getSelectedIndex() == -1)
        {
            LOGGER.log(Level.WARNING, "An attempt to add a new category without all necessary information.");
            JOptionPane.showMessageDialog(this, "All information should be added!", "ERROR",JOptionPane.WARNING_MESSAGE);
        }
        else
        {
            Category newCategory = new Category(category, description, cur, pricePerDay);
            categories.add(newCategory);
            ((DefaultListModel)Lcategories.getModel()).addElement(newCategory); 
            
            ((DefaultComboBoxModel)CBcategory.getModel()).removeAllElements();
            ((DefaultComboBoxModel)CBcategory.getModel()).addAll(categories);
            
            TnameC.setText("");
            TdescC.setText("");
            SpriceC.setValue(0f);
            CBcurC.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_BaddCActionPerformed

    private void BaddRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BaddRActionPerformed
        String room = TnumberR.getText();
        int discount = (int) Sdiscount.getValue();
        int condition = (int) Scondition.getValue();
        Category category = (Category) CBcategory.getSelectedItem();
        
        if(room.isBlank() || CBcategory.getSelectedIndex() == -1)
        {
            LOGGER.log(Level.WARNING, "An attempt to add a new room without all necessary information.");
            JOptionPane.showMessageDialog(this, "All information should be added!", "ERROR",JOptionPane.WARNING_MESSAGE);
        }
        else
        {
            Room newRoom = new Room(room, category, discount, condition);
            rooms.add(newRoom);
            ((DefaultListModel)Lrooms.getModel()).addElement(newRoom); 
            
            TnumberR.setText("");
            Sdiscount.setValue(0);
            Scondition.setValue(1);
            CBcategory.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_BaddRActionPerformed
    
    private void clearPaddP(){
        choosedPhoto = null;
        photos.removeAll(photos);
        categories.removeAll(categories);
        offers.removeAll(offers);
        rooms.removeAll(rooms);
    
        Lphotos.setIcon(null);
        TnameH.setText("");
        TcountryH.setText("");
        TaddressH.setText("");
        TownerH.setText("");
        TemailH.setText("");
             
        ((DefaultListModel)Loffers.getModel()).removeAllElements();
        TnameO.setText("");
        TdescO.setText("");
        SpriceO.setValue(0f);
        CBcurO.setSelectedIndex(-1);
        
        ((DefaultListModel)Lcategories.getModel()).removeAllElements();    
        TnameC.setText("");
        TdescC.setText("");
        SpriceC.setValue(0f);
        CBcurC.setSelectedIndex(-1);
        
        ((DefaultListModel)Lrooms.getModel()).removeAllElements();
        ((DefaultComboBoxModel)CBcategory.getModel()).removeAllElements();
        TnumberR.setText("");
        Sdiscount.setValue(0);
        Scondition.setValue(1);
        CBcategory.setSelectedIndex(-1);
    }
    
    private void BcreatePActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BcreatePActionPerformed
        String hotel = TnameH.getText();
        String country = TcountryH.getText();
        String address = TaddressH.getText();
        String owner = TownerH.getText();
        String email = TemailH.getText();
        
        if(hotel.isBlank() || country.isBlank() || address.isBlank() || owner.isBlank() || email.isBlank() || photos.size() == 0)
        {
            LOGGER.log(Level.WARNING, "An attempt to add a new hotel without all necessary information.");
            JOptionPane.showMessageDialog(this, "All information about the hotel should be added!", "ERROR",JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(offers.size() == 0)
        {
            LOGGER.log(Level.WARNING, "An attempt to add a new hotel without all necessary information.");
            JOptionPane.showMessageDialog(this, "All information about the hotel offers should be added!", "ERROR",JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(categories.size() == 0)
        {
            LOGGER.log(Level.WARNING, "An attempt to add a new hotel without all necessary information.");
            JOptionPane.showMessageDialog(this, "All information about the hotel categories should be added!", "ERROR",JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(rooms.size() == 0)
        {
            LOGGER.log(Level.WARNING, "An attempt to add a new hotel without all necessary information.");
            JOptionPane.showMessageDialog(this, "All information about the hotel rooms should be added!", "ERROR",JOptionPane.WARNING_MESSAGE);
            return;
        }

        ArrayList<File> new_photos = new ArrayList<File>(photos);
        ArrayList<Category> new_categories = new ArrayList<Category>(categories);
        ArrayList<Offer> new_offers = new ArrayList<Offer>(offers);
        ArrayList<Room> new_rooms = new ArrayList<Room>(rooms);

        Hotel newHotel = new Hotel(hotel, country, address, owner, email, new_photos, new_categories, new_offers, new_rooms);
        hotels.add(newHotel);
            
        clearPaddP();
        
        LOGGER.log(Level.INFO, "New hotel was added.");
        JOptionPane.showMessageDialog(this, "The new hotel was added!", "THANK YOU",JOptionPane.INFORMATION_MESSAGE);        
    }//GEN-LAST:event_BcreatePActionPerformed

    private void BseeRHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BseeRHActionPerformed
        ((DefaultComboBoxModel)CBchooseR1.getModel()).removeAllElements();
        for(Hotel h : hotels)
            {for(Room r : h.getRooms())
                {try{((DefaultComboBoxModel)CBchooseR1.getModel()).addElement(r);}
                catch(Exception ex){break;}}}
        
        ((DefaultListModel)LhistoryR1.getModel()).removeAllElements();

        CardLayout card = (CardLayout)Pcontent.getLayout();
        card.show(Pcontent, "seeRH");
    }//GEN-LAST:event_BseeRHActionPerformed

    private void BsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BsearchActionPerformed
        Date from = (Date) Sfrom.getValue();
        Date till = (Date) Still.getValue();
        long timeDiff = till.getTime() - from.getTime();
        int duration = (int) (timeDiff / (1000 * 60 * 60* 24));

        if (till.before(from) || duration == 0)
        {LOGGER.log(Level.WARNING, "An attempt to break data (reservation duration) rules.");
        JOptionPane.showMessageDialog(this, "Minimum stay is 1 day. Please, change the dates.", "ERROR",JOptionPane.ERROR_MESSAGE);}
        else
        {
            ArrayList<Room> availableRooms = new ArrayList<Room> ();
            
            for(Hotel h: hotels) 
            {h.seeAvailableRooms(availableRooms, reservations, from, till);}

           ((DefaultListModel)LavailableRooms.getModel()).removeAllElements();
           LtotalSum.setText("");
           ((DefaultListModel)LavailableRooms.getModel()).addAll(availableRooms);
        }
    }//GEN-LAST:event_BsearchActionPerformed

    private void BreserveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BreserveActionPerformed
        Person person = (Person) CBpeople.getSelectedItem();
        if(CBpeople.getSelectedIndex() == -1)
        {LOGGER.log(Level.WARNING, "An attempt to add a registration without the person.");
        JOptionPane.showMessageDialog(this, "Please, choose the person correctly!", "ERROR",JOptionPane.ERROR_MESSAGE); return;}
        
        Room selectedRoom = null;
        try{ 
            DefaultListModel model = (DefaultListModel)LavailableRooms.getModel();
            selectedRoom = (Room) model.getElementAt(LavailableRooms.getSelectedIndex());}
        catch(Exception ex)
            {LOGGER.log(Level.WARNING, "An attempt to add a registration without the room.");
            JOptionPane.showMessageDialog(this, "Please, choose the room correctly!", "ERROR",JOptionPane.ERROR_MESSAGE); return;}
        if(selectedRoom == null)
            {LOGGER.log(Level.WARNING, "An attempt to add a registration without the room.");
            JOptionPane.showMessageDialog(this, "Please, choose the room correctly!", "ERROR",JOptionPane.ERROR_MESSAGE); return;}
        
        Date from = (Date) Sfrom.getValue();
        Date till = (Date) Still.getValue();
        
        Hotel hotel = null;       
        for(Hotel h: hotels)
            {for(Room r: h.getRooms())
                {if(selectedRoom.equals(r))
                {hotel = h; break;}}}
        
        Reservation reservation = new Reservation(person, hotel, selectedRoom, true, from, till);
        reservations.add(reservation);
                
        CBpeople.setSelectedIndex(-1);
        Sfrom.setValue(Sdate.getValue());
        Still.setValue(Sdate.getValue());
        
        LOGGER.log(Level.INFO, "New room registration was added.");
        JOptionPane.showMessageDialog(this, "This room registration was accepted!", "THANK YOU",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_BreserveActionPerformed

    private void BcancelRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BcancelRActionPerformed
        ((DefaultListModel)Lreservations.getModel()).removeAllElements();
        for(Reservation r: reservations)
            {if (r.isReserved() && r.isPayed() == false)
                {((DefaultListModel)Lreservations.getModel()).addElement(r);}}
        
        CardLayout card = (CardLayout)Pcontent.getLayout();
        card.show(Pcontent, "cancelR");
    }//GEN-LAST:event_BcancelRActionPerformed

    private void BcancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BcancelActionPerformed
        Reservation selectedReservation = null;
        try{ 
            DefaultListModel model = (DefaultListModel)Lreservations.getModel();
            selectedReservation = (Reservation) model.getElementAt(Lreservations.getSelectedIndex());}
        catch(Exception ex)
            {LOGGER.log(Level.WARNING, "An attempt to cancel a not choosen reservation.");
            JOptionPane.showMessageDialog(this, "Please, choose the reservation correctly!", "ERROR",JOptionPane.ERROR_MESSAGE); return;}
        if(selectedReservation == null)
            {LOGGER.log(Level.WARNING, "An attempt to cancel a not choosen reservation.");
            JOptionPane.showMessageDialog(this, "Please, choose the reservation correctly!", "ERROR",JOptionPane.ERROR_MESSAGE); return;}
        
        if(selectedReservation.getDateFrom().before((Date)Sdate.getValue()) || selectedReservation.getDateFrom().equals((Date)Sdate.getValue()))
            {LOGGER.log(Level.WARNING, "An attempt to cancel an elapsed reservation.");
            JOptionPane.showMessageDialog(this, "This room reservation has already elapsed! You can NOT cancel it. Please, pay for staying instead.", "ERROR",JOptionPane.ERROR_MESSAGE); return;}
        
        reservations.remove(selectedReservation);
        ((DefaultListModel)Lreservations.getModel()).removeAllElements();
        for(Reservation r: reservations)
            {if (r.isReserved() && r.isPayed() == false)
                {((DefaultListModel)Lreservations.getModel()).addElement(r);}}
    }//GEN-LAST:event_BcancelActionPerformed

    private void BuseOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuseOActionPerformed
        ((DefaultComboBoxModel)CBoffers.getModel()).removeAllElements();
        ((DefaultListModel)LreserO.getModel()).removeAllElements();
        Lsum.setText("");
        offers.removeAll(offers);
        
        ((DefaultListModel)Lreser.getModel()).removeAllElements();
        ((DefaultListModel)Lreser.getModel()).addAll(reservations);

        CardLayout card = (CardLayout)Pcontent.getLayout();
        card.show(Pcontent, "useO");
    }//GEN-LAST:event_BuseOActionPerformed

    private void BpayRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BpayRActionPerformed
        BGpayment.clearSelection();
        ((DefaultListModel)LnotpayedR.getModel()).removeAllElements();
        
        for(Reservation r: reservations)
            {if (r.isReserved() && r.isPayed() == false)
                {((DefaultListModel)LnotpayedR.getModel()).addElement(r);}}
        
        CardLayout card = (CardLayout)Pcontent.getLayout();
        card.show(Pcontent, "payR");
    }//GEN-LAST:event_BpayRActionPerformed

    private void BseeUHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BseeUHActionPerformed
        ((DefaultComboBoxModel)CBchooseU.getModel()).removeAllElements();
        ((DefaultComboBoxModel)CBchooseU.getModel()).addAll(people);
        
        ((DefaultListModel)LhistoryU.getModel()).removeAllElements();

        CardLayout card = (CardLayout)Pcontent.getLayout();
        card.show(Pcontent, "seeUH");
    }//GEN-LAST:event_BseeUHActionPerformed

    private void BseeRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BseeRActionPerformed
        ((DefaultListModel)LseeNP.getModel()).removeAllElements();
        for(Reservation r: reservations)
            {if (r.getDateTill().before((Date) Sdate.getValue()) && r.isPayed() == false)
                {((DefaultListModel)LseeNP.getModel()).addElement(r);}}

        CardLayout card = (CardLayout)Pcontent.getLayout();
        card.show(Pcontent, "seeR");
    }//GEN-LAST:event_BseeRActionPerformed

    private void BpayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BpayActionPerformed
        Reservation selectedReservation = null;
        try{ 
            DefaultListModel model = (DefaultListModel)LnotpayedR.getModel();
            selectedReservation = (Reservation) model.getElementAt(LnotpayedR.getSelectedIndex());}
        catch(Exception ex)
            {LOGGER.log(Level.WARNING, "An attempt to pay for a not choosen reservation.");
            JOptionPane.showMessageDialog(this, "Please, choose the reservation correctly!", "ERROR",JOptionPane.ERROR_MESSAGE); return;}
        if(selectedReservation == null)
            {LOGGER.log(Level.WARNING, "An attempt to pay for a not choosen reservation.");
            JOptionPane.showMessageDialog(this, "Please, choose the reservation correctly!", "ERROR",JOptionPane.ERROR_MESSAGE); return;}
        
        if(selectedReservation.getDateTill().after((Date)Sdate.getValue()) || selectedReservation.getDateTill().equals((Date)Sdate.getValue()))
            {LOGGER.log(Level.WARNING, "An attempt to pay for the reservation before leaving.");
            JOptionPane.showMessageDialog(this, "Please, pay for this reservation after leaving!", "ATTENTION",JOptionPane.WARNING_MESSAGE); return;}
        
        if(RBcard.isSelected() == false && RBcash.isSelected() == false)
            {LOGGER.log(Level.WARNING, "An attempt to pay without any resource of money.");
            JOptionPane.showMessageDialog(this, "Please, choose the payment method!", "ERROR",JOptionPane.ERROR_MESSAGE); return;}
        
        selectedReservation.setPayed(true);
        selectedReservation.setDatePayment((Date)Sdate.getValue());
        if(RBcard.isSelected()) {selectedReservation.setWithCard(true);}
        if(RBcash.isSelected()) {selectedReservation.setWithCard(false);}
        
        BGpayment.clearSelection();
        ((DefaultListModel)LnotpayedR.getModel()).removeAllElements();        
        for(Reservation r: reservations)
            {if (r.isReserved() && r.isPayed() == false)
                {((DefaultListModel)LnotpayedR.getModel()).addElement(r);}}
        
        LOGGER.log(Level.INFO, "Paying for the registration ended successfully.");
        JOptionPane.showMessageDialog(this, "This room registration was successfully payed!", "ATTENTION",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_BpayActionPerformed

    private void BaddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BaddActionPerformed
        Offer selectedOffer = (Offer) CBoffers.getSelectedItem();
        
        if(CBoffers.getSelectedIndex() == -1)
        {LOGGER.log(Level.WARNING, "Attempt to add an empty offer.");
        JOptionPane.showMessageDialog(this, "Please, choose an offer and its quantity!", "ERROR",JOptionPane.ERROR_MESSAGE); return;}
        
        offers.add(selectedOffer);
        ((DefaultListModel)LreserO.getModel()).addElement(selectedOffer);
        
        Float total = 0f;
        for(Offer o: offers) {total += o.getPrice();}
        Lsum.setText(String.valueOf(total) + " EUR");
        
        CBoffers.setSelectedIndex(-1);
    }//GEN-LAST:event_BaddActionPerformed

    private void BopenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BopenActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Choose information location: ");   
        int choice = fileChooser.showOpenDialog(this);
        
        if (choice == JFileChooser.APPROVE_OPTION) {
            try {
            File openFile = fileChooser.getSelectedFile();
            try (FileInputStream file = new FileInputStream(openFile);
                 ObjectInputStream in = new ObjectInputStream(file)) {this.INFO = (Information)in.readObject();}} 
            catch (FileNotFoundException ex) {LOGGER.log(Level.SEVERE, "Can't find the file."); return;} 
            catch (IOException | ClassNotFoundException ex) {LOGGER.log(Level.SEVERE, "Problem durit information file opening."); return;}
        }
        
        people = INFO.getPeople();
        hotels = INFO.getHotels();
        reservations = INFO.getReservations();
    }//GEN-LAST:event_BopenActionPerformed

    private void BsaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BsaveActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Choose file for saving");   
        int choice = fileChooser.showSaveDialog(this);
        
        if (choice == JFileChooser.APPROVE_OPTION) {
            File saveFile = fileChooser.getSelectedFile();
        
            
        INFO.setPeople(people);
        INFO.setHotels(hotels);
        INFO.setReservations(reservations);
        
        try (FileOutputStream file = new FileOutputStream(saveFile); 
            ObjectOutputStream out = new ObjectOutputStream(file)) {out.writeObject(INFO);}
        catch(IOException ex){LOGGER.log(Level.SEVERE, "Error during file saving.");}
}    }//GEN-LAST:event_BsaveActionPerformed

    private void BrememberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrememberActionPerformed
    Reservation selectedReservation = null;
    try {DefaultListModel model = (DefaultListModel)Lreser.getModel();
        selectedReservation = (Reservation) model.getElementAt(Lreser.getSelectedIndex());}
    catch (Exception ex) {LOGGER.log(Level.WARNING, "An attempt to add offer without registration."); 
    JOptionPane.showMessageDialog(this, "Please, choose a reservation!", "ERROR",JOptionPane.ERROR_MESSAGE); return;}
    
    if(offers.size() == 0){LOGGER.log(Level.WARNING, "An attempt to add an empty list of offers."); 
    JOptionPane.showMessageDialog(this, "Please, add an offer!", "ERROR",JOptionPane.ERROR_MESSAGE); return;}
    
    selectedReservation.setOffers(offers);
    
    offers.remove(offers);
    ((DefaultComboBoxModel)CBoffers.getModel()).removeAllElements();
    ((DefaultListModel)LreserO.getModel()).removeAllElements();
    Lsum.setText("");
    Lreser.setSelectedIndex(-1);
    }//GEN-LAST:event_BrememberActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {    
                new Window().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup BGgender;
    private javax.swing.ButtonGroup BGpayment;
    private javax.swing.JButton Badd;
    private javax.swing.JButton BaddC;
    private javax.swing.JButton BaddH;
    private javax.swing.JButton BaddO;
    private javax.swing.JButton BaddPhoto;
    private javax.swing.JButton BaddR;
    private javax.swing.JButton Bcancel;
    private javax.swing.JButton BcancelR;
    private javax.swing.JButton Bchoose;
    private javax.swing.JButton Bcreate;
    private javax.swing.JButton BcreateP;
    private javax.swing.JButton BcreateU;
    private javax.swing.JButton Bexit;
    private javax.swing.JButton BmakeR;
    private javax.swing.JRadioButton Bmr;
    private javax.swing.JRadioButton Bmrs;
    private javax.swing.JButton Bopen;
    private javax.swing.JButton Bpay;
    private javax.swing.JButton BpayR;
    private javax.swing.JButton Bremember;
    private javax.swing.JButton Breserve;
    private javax.swing.JButton Bsave;
    private javax.swing.JButton Bsearch;
    private javax.swing.JButton BseeR;
    private javax.swing.JButton BseeRH;
    private javax.swing.JButton BseeUH;
    private javax.swing.JButton BuseO;
    private javax.swing.JComboBox<String> CBcategory;
    private javax.swing.JComboBox<String> CBchooseR1;
    private javax.swing.JComboBox<String> CBchooseU;
    private javax.swing.JComboBox<String> CBcurC;
    private javax.swing.JComboBox<String> CBcurO;
    private javax.swing.JComboBox<String> CBoffers;
    private javax.swing.JComboBox<String> CBpeople;
    private javax.swing.JLabel LaddSum;
    private javax.swing.JLabel Laddress;
    private javax.swing.JLabel LaddressH;
    private javax.swing.JList<String> LavailableRooms;
    private javax.swing.JLabel Lcancel;
    private javax.swing.JList<String> Lcategories;
    private javax.swing.JLabel Lcategory;
    private javax.swing.JLabel LchooseO;
    private javax.swing.JLabel LchooseR;
    private javax.swing.JLabel LchooseR1;
    private javax.swing.JLabel LchooseReser;
    private javax.swing.JLabel LchooseRoom;
    private javax.swing.JLabel LchooseU;
    private javax.swing.JLabel Lchoosemethod;
    private javax.swing.JLabel Lcondition;
    private javax.swing.JLabel Lcountry;
    private javax.swing.JLabel LcountryH;
    private javax.swing.JLabel LdescC;
    private javax.swing.JLabel LdescO;
    private javax.swing.JLabel Ldiscount;
    private javax.swing.JLabel Lemail;
    private javax.swing.JLabel LemailH;
    private javax.swing.JLabel Leng;
    private javax.swing.JLabel Lfrom;
    private javax.swing.JList<String> LhistoryR1;
    private javax.swing.JList<String> LhistoryU;
    private javax.swing.JLabel Lname;
    private javax.swing.JLabel LnameC;
    private javax.swing.JLabel LnameH;
    private javax.swing.JLabel LnameO;
    private javax.swing.JList<String> LnotpayedR;
    private javax.swing.JLabel LnumberR;
    private javax.swing.JLabel Loffer;
    private javax.swing.JList<String> Loffers;
    private javax.swing.JLabel LownerH;
    private javax.swing.JLabel Lphotos;
    private javax.swing.JLabel LpriceC;
    private javax.swing.JLabel LpriceO;
    private javax.swing.JList<String> Lreser;
    private javax.swing.JList<String> LreserO;
    private javax.swing.JList<String> Lreservations;
    private javax.swing.JList<String> Lrooms;
    private javax.swing.JList<String> LseeNP;
    private javax.swing.JLabel LselectU;
    private javax.swing.JLabel Lsetdate;
    private javax.swing.JLabel Lsk;
    private javax.swing.JLabel Lsum;
    private javax.swing.JLabel Ltill;
    private javax.swing.JLabel Ltotal;
    private javax.swing.JLabel LtotalSum;
    private javax.swing.JPanel PaddH;
    private javax.swing.JPanel PcancelR;
    private javax.swing.JPanel Pcontent;
    private javax.swing.JPanel PcreateU;
    private javax.swing.JPanel PforHotel;
    private javax.swing.JPanel PforReserve;
    private javax.swing.JPanel PforRoom;
    private javax.swing.JPanel PforUser;
    private javax.swing.JPanel PforWishes;
    private javax.swing.JPanel PmakeR;
    private javax.swing.JPanel Pmenu;
    private javax.swing.JPanel PpayR;
    private javax.swing.JPanel PseeR;
    private javax.swing.JPanel PseeRH;
    private javax.swing.JPanel PseeUH;
    private javax.swing.JPanel PuseO;
    private javax.swing.JRadioButton RBcard;
    private javax.swing.JRadioButton RBcash;
    private javax.swing.JScrollPane SPavailableRooms;
    private javax.swing.JScrollPane SPcategories;
    private javax.swing.JScrollPane SPhistoryR1;
    private javax.swing.JScrollPane SPhistoryU;
    private javax.swing.JScrollPane SPnotpayedR;
    private javax.swing.JScrollPane SPoffers;
    private javax.swing.JScrollPane SPreser;
    private javax.swing.JScrollPane SPreserO;
    private javax.swing.JScrollPane SPreservations;
    private javax.swing.JScrollPane SProoms;
    private javax.swing.JScrollPane SPseeNP;
    private javax.swing.JSpinner Scondition;
    private javax.swing.JSpinner Sdate;
    private javax.swing.JSpinner Sdiscount;
    private javax.swing.JSpinner Sfrom;
    private javax.swing.JSlider Slanguage;
    private javax.swing.JSpinner SpriceC;
    private javax.swing.JSpinner SpriceO;
    private javax.swing.JSpinner Still;
    private javax.swing.JTextField Taddress;
    private javax.swing.JTextField TaddressH;
    private javax.swing.JTextField Tcountry;
    private javax.swing.JTextField TcountryH;
    private javax.swing.JTextField TdescC;
    private javax.swing.JTextField TdescO;
    private javax.swing.JTextField Temail;
    private javax.swing.JTextField TemailH;
    private javax.swing.JTextField Tname;
    private javax.swing.JTextField TnameC;
    private javax.swing.JTextField TnameH;
    private javax.swing.JTextField TnameO;
    private javax.swing.JTextField TnumberR;
    private javax.swing.JTextField TownerH;
    private javax.swing.JPanel pforCategory;
    private javax.swing.JPanel pforOffer;
    // End of variables declaration//GEN-END:variables
}
